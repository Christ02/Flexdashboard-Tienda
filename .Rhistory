bottom_rentabilidad_productos <- rentabilidad_productos %>%
top_n(-10, total_profit)  # Seleccionar los 10 productos menos rentables
# Crear gráfico de barras para productos más rentables
p1 <- ggplot(top_rentabilidad_productos, aes(x = reorder(`Product Name`, total_profit), y = total_profit)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
labs(title = "Top 10 Productos Más Rentables", x = "Producto", y = "Ganancia Total") +
theme_minimal()
# Crear gráfico de barras para productos menos rentables
p2 <- ggplot(bottom_rentabilidad_productos, aes(x = reorder(`Product Name`, total_profit), y = total_profit)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Productos Menos Rentables", x = "Producto", y = "Ganancia Total") +
theme_minimal()
# Convertir gráficos a objetos interactivos con plotly
plotly_p1 <- ggplotly(p1)
plotly_p2 <- ggplotly(p2)
# Mostrar los gráficos en el dashboard
plotly_p1
plotly_p2
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("~/GitHub/Flexdashboard-Tienda/Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
tienda <- tienda %>%
left_join(region_coords, by = "Region")
# Filter the desired categories (optional, as per your requirement)
tienda_filtered_category <- tienda %>%
filter(Category %in% c("Technology", "Office Supplies", "Furniture"))
rentabilidad_productos <- tienda_filtered_category %>%
group_by(`Product Name`) %>%  # Usar comillas invertidas para el nombre de la columna con espacio
summarise(
total_sales = sum(Sales, na.rm = TRUE),  # Sumar ventas, eliminando valores NA
total_profit = sum(Profit, na.rm = TRUE),  # Sumar ganancias, eliminando valores NA
avg_profit = mean(Profit, na.rm = TRUE)  # Calcular promedio de ganancias, eliminando valores NA
) %>%
arrange(desc(total_profit))
# Summarize data by Category
segmento_ventas_ganancias <- tienda_filtered_category %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Region
segmento_ventas_ganancias_region <- tienda_filtered_category %>%
group_by(Region) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Segment
segmento_ventas_ganancias_cliente <- tienda_filtered_category %>%
group_by(Segment) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Create SharedData objects
shared_segmento <- SharedData$new(segmento_ventas_ganancias)
shared_region <- SharedData$new(segmento_ventas_ganancias_region)
shared_segmento_cliente <- SharedData$new(segmento_ventas_ganancias_cliente)
shared_tienda <- SharedData$new(tienda_filtered_category)
# Cargar el paquete leaflet
library(leaflet)
# Crear un mapa básico centrado en las coordenadas promedio de tu dataset
mapa <- leaflet(Tienda_coords) %>%
addTiles() %>%  # Agregar capa de mapa base
setView(lng = mean(Tienda_coords$lon, na.rm = TRUE),
lat = mean(Tienda_coords$lat, na.rm = TRUE),
zoom = 5) %>%  # Ajustar el zoom inicial según sea necesario
addCircleMarkers(
lng = ~lon,
lat = ~lat,
radius = 5,  # Tamaño de los marcadores
color = "blue",  # Color de los marcadores
popup = ~paste(
"<b>City:</b>", City, "<br>",
"<b>State:</b>", State, "<br>",
"<b>Country:</b>", Country, "<br>",
"<b>Sales:</b>", Sales, "<br>",
"<b>Profit:</b>", Profit
)
)
# Mostrar el mapa
mapa
rentabilidad_productos <- tienda %>%
group_by(`Product Name`) %>%  # Usar comillas invertidas para el nombre de la columna con espacio
summarise(
total_sales = sum(Sales, na.rm = TRUE),  # Sumar ventas, eliminando valores NA
total_profit = sum(Profit, na.rm = TRUE),  # Sumar ganancias, eliminando valores NA
avg_profit = mean(Profit, na.rm = TRUE)  # Calcular promedio de ganancias, eliminando valores NA
) %>%
arrange(desc(total_profit))
DT::datatable(rentabilidad_productos, options = list(pageLength = 10))
# Gráfico de los 10 productos más rentables
top_rentabilidad_productos <- rentabilidad_productos %>%
top_n(10, total_profit)  # Seleccionar los 10 productos más rentables
# Crear gráfico de barras para productos más rentables
p1 <- ggplot(top_rentabilidad_productos, aes(x = reorder(`Product Name`, total_profit), y = total_profit)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
labs(title = "Top 10 Productos Más Rentables", x = "Producto", y = "Ganancia Total") +
theme_minimal()
# Convertir gráficos a objetos interactivos con plotly
plotly_p1 <- ggplotly(p1)
# Mostrar los gráficos en el dashboard
plotly_p1
# Gráfico de los 10 productos menos rentables
bottom_rentabilidad_productos <- rentabilidad_productos %>%
top_n(-10, total_profit)  # Seleccionar los 10 productos menos rentables
# Crear gráfico de barras para productos menos rentables
p2 <- ggplot(bottom_rentabilidad_productos, aes(x = reorder(`Product Name`, total_profit), y = total_profit)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top 10 Productos Menos Rentables", x = "Producto", y = "Ganancia Total") +
theme_minimal()
plotly_p2 <- ggplotly(p2)
plotly_p2
filter_checkbox("Category", "Seleccionar Categoría", shared_segmento, ~Category)
datatable(shared_segmento, extensions = 'Scroller', options = list(pageLength = 5, deferRender = TRUE, scrollY = 300))
# Use the SharedData directly in ggplot
p <- ggplot(shared_segmento, aes(x = Category, y = AverageProfit, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Comparación de Profit Promedio por Categoría", x = "Categoría", y = "Profit Promedio") +
theme_minimal()
ggplotly(p)
datatable(shared_region, extensions = 'Scroller', options = list(pageLength = 5, deferRender = TRUE, scrollY = 300))
datatable(shared_segmento_cliente, extensions = 'Scroller', options = list(pageLength = 5, deferRender = TRUE, scrollY = 300))
# Cargar el paquete leaflet
library(leaflet)
# Crear un mapa básico centrado en las coordenadas promedio de tu dataset
mapa <- leaflet(Tienda_coords) %>%
addTiles() %>%  # Agregar capa de mapa base
setView(lng = mean(Tienda_coords$lon, na.rm = TRUE),
lat = mean(Tienda_coords$lat, na.rm = TRUE),
zoom = 5) %>%  # Ajustar el zoom inicial según sea necesario
addCircleMarkers(
lng = ~lon,
lat = ~lat,
radius = 5,  # Tamaño de los marcadores
color = "blue",  # Color de los marcadores
popup = ~paste(
"<b>City:</b>", City, "<br>",
"<b>State:</b>", State, "<br>",
"<b>Country:</b>", Country, "<br>",
"<b>Sales:</b>", Sales, "<br>",
"<b>Profit:</b>", Profit
)
)
# Mostrar el mapa
mapa
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
# Filter the desired categories (optional, as per your requirement)
tienda_filtered_category <- tienda %>%
filter(Category %in% c("Technology", "Office Supplies", "Furniture"))
# Summarize data by Category
segmento_ventas_ganancias <- tienda_filtered_category %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Region
segmento_ventas_ganancias_region <- tienda_filtered_category %>%
group_by(Region) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Segment
segmento_ventas_ganancias_cliente <- tienda_filtered_category %>%
group_by(Segment) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Create SharedData objects
shared_segmento <- SharedData$new(segmento_ventas_ganancias)
shared_region <- SharedData$new(segmento_ventas_ganancias_region)
shared_segmento_cliente <- SharedData$new(segmento_ventas_ganancias_cliente)
shared_tienda <- SharedData$new(tienda_filtered_category)
## Filter by Category
filter_checkbox("Category", "Seleccionar Categoría", shared_segmento, ~Category)
## Filter by Region
filter_checkbox("Region", "Seleccionar Región", shared_segmento, ~Region)
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
# Filter the desired categories (optional, as per your requirement)
tienda_filtered_category <- tienda %>%
filter(Category %in% c("Technology", "Office Supplies", "Furniture"))
tienda_filtered_Region <- tienda %>%
filter(Region %in% c("North", "South", "East", "West"))
tienda_filtered_Segment <- tienda %>%
filter(Segment %in% c("Consumer", "Corporate", "Home Office"))
# Summarize data by Category
segmento_ventas_ganancias <- tienda_filtered_category %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Region
segmento_ventas_ganancias_region <- tienda_filtered_category %>%
group_by(Region) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Segment
segmento_ventas_ganancias_cliente <- tienda_filtered_category %>%
group_by(Segment) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Create SharedData objects
shared_segmento <- SharedData$new(segmento_ventas_ganancias)
shared_region <- SharedData$new(segmento_ventas_ganancias_region)
shared_segmento_cliente <- SharedData$new(segmento_ventas_ganancias_cliente)
shared_tienda <- SharedData$new(tienda_filtered_category)
## Filter by Category
filter_checkbox("Category", "Seleccionar Categoría", shared_segmento, ~Category)
## Filter by Region
filter_checkbox("Region", "Seleccionar Región", shared_segmento, ~Region)
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
# Filter the desired categories (optional, as per your requirement)
# Combine filters for Category, Region, and Segment
tienda_filtered <- tienda %>%
filter(Category %in% c("Technology", "Office Supplies", "Furniture"),
Region %in% c("North", "South", "East", "West"),
Segment %in% c("Consumer", "Corporate", "Home Office"))
# Preview the filtered data
head(tienda_filtered)
# Summarize data by Category
segmento_ventas_ganancias <- tienda_filtered_category %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Region
segmento_ventas_ganancias_region <- tienda_filtered_category %>%
group_by(Region) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Summarize data by Segment
segmento_ventas_ganancias_cliente <- tienda_filtered_category %>%
group_by(Segment) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Create SharedData objects
shared_segmento <- SharedData$new(segmento_ventas_ganancias)
shared_region <- SharedData$new(segmento_ventas_ganancias_region)
shared_segmento_cliente <- SharedData$new(segmento_ventas_ganancias_cliente)
shared_tienda <- SharedData$new(tienda_filtered_category)
## Filter by Category
filter_checkbox("Category", "Seleccionar Categoría", shared_segmento, ~Category)
## Filter by Region
filter_checkbox("Region", "Seleccionar Región", shared_segmento, ~Region)
library(readr)
library(dplyr)
library(DT)
library(leaflet)
library(leaflet.extras)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(crosstalk)
# Load and prepare data
tienda <- read_csv("tienda.csv", locale = locale(encoding = "ISO-8859-1"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
# Filter the desired categories (optional, as per your requirement)
# Combine filters for Category, Region, and Segment
tienda_filtered <- tienda %>%
filter(Category %in% c("Technology", "Office Supplies", "Furniture"),
Region %in% c("North", "South", "East", "West"),
Segment %in% c("Consumer", "Corporate", "Home Office"))
segmento_ventas_ganancias <- tienda %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales),
TotalProfit = sum(Profit),
AverageProfit = mean(Profit)
) %>%
arrange(desc(TotalProfit))
DT::datatable(segmento_ventas_ganancias, options = list(pageLength = 5))
library(readr)
library(dplyr)
library(DT)
library(ggplot2)
library(leaflet)
library(crosstalk)
library(ggmap)
library(tidyr)
library(scales)
library(kableExtra)
library(plotly)
tienda <- read_csv("tienda.csv", locale = locale(encoding = "UTF-8"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
segmento_ventas_ganancias <- shared_segmento %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Wrap your data with SharedData for crosstalk interactivity
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
# Análisis de Segmentos de Ventas y Ganancia {data-icon=fa-pie-chart}
## Row {data-width=350}
### Análisis por Categoría
# Summarize the data by Category with SharedData
segmento_ventas_ganancias <- shared_segmento %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
library(readr)
library(dplyr)
library(DT)
library(ggplot2)
library(leaflet)
library(crosstalk)
library(ggmap)
library(tidyr)
library(scales)
library(kableExtra)
library(plotly)
tienda <- read_csv("tienda.csv", locale = locale(encoding = "UTF-8"))
Tienda_coords <- read_csv("Tienda_coords.csv", locale = locale(encoding = "UTF-8"))
rentabilidad_productos <- tienda %>%
group_by(`Product Name`) %>%
summarize(Total_Profit = sum(Profit, na.rm = TRUE)) %>%
arrange(desc(Total_Profit))  #
producto_mas_rentable <- rentabilidad_productos %>%
slice_max(Total_Profit, n = 3)
producto_menos_rentable <- rentabilidad_productos %>%
slice_min(Total_Profit, n = 3)
producto_mas_rentable %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
producto_menos_rentable %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
top_10_rentables <- rentabilidad_productos %>%
top_n(10, wt = Total_Profit)
# Wrap your data with SharedData for crosstalk interactivity
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
# Análisis de Segmentos de Ventas y Ganancia {data-icon=fa-pie-chart}
## Row {data-width=350}
### Análisis por Categoría
# Summarize the data by Category with SharedData
segmento_ventas_ganancias <- shared_segmento %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Wrap your data with SharedData for crosstalk interactivity
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
segmento_ventas_ganancias <- shared_segmento %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
# Wrap your data with SharedData for crosstalk interactivity
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
## Row {data-width=350}
### Análisis por Categoría
```{r}
# Wrap your data with SharedData for crosstalk interactivity
shared_segmento <- SharedData$new(tienda)
# Add a filter_checkbox for Category
filter_checkbox("Category", "Filtrar por Categoría", shared_segmento, ~Category)
# Add a filter_checkbox for Region
filter_checkbox("Region", "Filtrar por Región", shared_segmento, ~Region)
# Add a filter_checkbox for Segment
filter_checkbox("Segment", "Filtrar por Segmento", shared_segmento, ~Segment)
## Row {data-width=350}
### Análisis por Categoría
filtered_data <- shared_segmento$data()
# Summarize the data by Category
segmento_ventas_ganancias <- filtered_data %>%
group_by(Category) %>%
summarise(
TotalSales = sum(Sales, na.rm = TRUE),
TotalProfit = sum(Profit, na.rm = TRUE),
AverageProfit = mean(Profit, na.rm = TRUE)
) %>%
arrange(desc(TotalProfit))
DT::datatable(segmento_ventas_ganancias, options = list(pageLength = 5))
